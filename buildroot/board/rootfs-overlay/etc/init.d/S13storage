#!/bin/sh
#
# RASPI-KIDZ
# Initialize and mount the storage partition
#

case "$1" in
	start)
		if [ -b /dev/mmcblk0 ] ; then
			# Raspberry Pi
			root_dev=/dev/mmcblk0
			root_part=/dev/mmcblk0p2
			stor_part=/dev/mmcblk0p3
		elif [ -b /dev/vda ] ; then
			# Raspberry Pi in QEMU
			root_dev=/dev/vda
			root_part=/dev/vda2
			stor_part=/dev/vda3
		elif [ -b /dev/sda ] ; then
			# PC
			root_dev=/dev/sda
			root_part=/dev/sda1
			stor_part=/dev/sda2
		fi

		if ! [ -b "${stor_part}" ] ; then
			printf "Creating storage partition: "
			result="OK"

			root_dev_size=$(cat /sys/class/block/"${root_dev##*/}"/size)
			root_part_num=$(cat /sys/class/block/"${root_part##*/}"/partition)
			root_part_end=$(partx -s -g -o END -n "${root_part_num}" "${root_dev}")

			stor_part_start=$(((root_part_end + 2048) / 2048 * 2048))  # Align to 2048 sectors
			stor_part_end=$((root_dev_size - 1))

			if ! parted -s "${root_dev}" mkpart primary "${stor_part_start}"s "${stor_part_end}"s ; then
				result="FAIL"
			fi

			printf "Creating storage filesystem: "
			result="OK"
			if ! mkfs.ext4 -F -L storage "${stor_part}" ; then
				result="FAIL"
			fi
			echo "${result}"
		fi

		printf "Mounting storage partition: "
		mkdir -p /storage
		result="OK"
		if ! mount -o ro "${stor_part}" /storage ; then
			result="FAIL"
		fi
		echo "${result}"
		;;

	stop)
		printf "Unmounting storage partition: "
		result="OK"
		if ! umount /storage ; then
			result="FAIL"
		fi
		echo "${result}"
		;;

	*)
		echo "Usage: $0 {start|stop}"
		exit 1
		;;
esac

exit $?

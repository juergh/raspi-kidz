#!/bin/bash -eu
#
# Run a Raspberry Pi OS image in QEMU
#

function out()
{
	local rc=${?}

	trap - EXIT INT TERM HUP

	rm -rf "${TMPDIR}"

	if [ "${rc}" -ne 0 ] ; then
		echo "Script failed" >&2
	fi

	exit "${rc}"
}

function usage()
{
    cat <<EOF
Usage: qemu-raspi [-h] [-i INITRD] [-q QEMU] KERNEL IMAGE

Positional arguments:
  KERNEL               The kernel to use for booting the image.
  IMAGE                The image file containing the OS to run.

Optional arguments:
  -h, --help           Show this help text and exit.
  -i, --initrd INITRD  Use the provided initrd INITRD image.
  -q, --qemu QEMU      Use the QEMU binary QEMU rather than
                       /usr/bin/qemu-system-aarch64.
EOF
}

kernel=
image=
mem=1024
qemu="qemu-system-aarch64"
smp=4
initrd=

while [ $# -ne 0 ] ; do
	case "${1}" in
		-h|--help)
			usage
			exit
			;;
		-i|--initrd)
			shift
			initrd=${1}
			;;
		-m|--mem)
			shift
			mem=${1}
			;;
		-q|--qemu)
			shift
			qemu=${1}
			;;
		-s|--smp)
			shift
			smp=${1}
			;;
		-*)
			echo "Invalid argument: ${1}" >&2
			exit 2
			;;
		*)
			if [ -z "${kernel}" ] ; then
				kernel=$(readlink -f "${1}")
			elif [ -z "${image}" ] ; then
				image=$(readlink -f "${1}")
			else
				echo "Invalid argument: ${1}" >&2
				exit 2
			fi
			;;
	esac
	shift
done

if [ -z "${image}" ] || [ -z "${kernel}" ] ; then
    usage >&2
    exit 2
fi

if ! [ -f "${kernel}" ] ; then
    echo "No such kernel file: ${kernel}" >&2
    exit 1
fi

if ! [ -f "${image}" ] ; then
    echo "No such image file: ${image}" >&2
    exit 1
fi

# Create a temporary directory and install an exit handler
TMPDIR=$(mktemp -d --tmp qemu-raspi-XXXXXX)
trap out EXIT INT TERM HUP

# Create a temporary disk image using the provided image file as a backing
# file, so that we don't modify the original image
tmp_image="${TMPDIR}/disk.qcow2"
qemu-img create -f qcow2 -b "${image}" "${tmp_image}" 1G

# Assemble the qemu command and options
qemu_opts=(
	"-M" "virt"
	"-accel" "tcg,thread=multi"
	"-cpu" "cortex-a57"
	"-m" "${mem}"
	"-smp" "${smp}"
	"-device" "VGA,edid=on,xres=800,yres=480"
	"-device" "usb-ehci"
	"-device" "usb-kbd"
	"-device" "ES1370"
	"-device" "virtio-serial-pci"
	"-device" "virtio-net-pci,netdev=net0"
	"-netdev" "user,id=net0,hostfwd=tcp::5022-:22"
	"-kernel" "${kernel}"
	"-drive" "file=${tmp_image},format=qcow2"
)

if [ -n "${initrd}" ] ; then
	qemu_opts+=(
		"-initrd" "${initrd}"
		"-append" "console=ttyAMA0 logo.nologo"
	)
else
	qemu_opts+=(
		"-append" "root=/dev/vda2 rootwait console=ttyAMA0 logo.nologo vt.global_cursor_default=0 init=/sbin/overlay-init"
	)
fi

echo
echo "${qemu} ${qemu_opts[*]}"
echo

"${qemu}" "${qemu_opts[@]}"

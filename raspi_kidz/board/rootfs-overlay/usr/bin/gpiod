#!/bin/sh -eu
#
# RASPI-KIDZ
# Simple daemon that interracts with the raspi-kidz PIC
#

SYS_ON=5
RPI_UP=26

out()
{
	rc=${?}

	trap - EXIT INT TERM

	if [ -n "${SHUTDOWN_PID}" ] ; then
		kill "${SHUTDOWN_PID}"
	fi

	if [ ${rc} -eq 0 ] ; then
		echo "Daemon terminated"
	else
		echo "Error: Daemon terminated unexpectedly" >&2
	fi

	exit "${rc}"
}

SHUTDOWN_PID=
trap out EXIT INT TERM

# Find the GPIO chip
GPIO_CHIP=$(gpiodetect | awk '$2 == "[pinctrl-bcm2835]" { print $1 }')
if [ -z "${GPIO_CHIP}" ] ; then
	echo "Error: GPIO chip not found" >&2
	exit 1
fi

# Drive RPI_UP high to signal that we're up
if gpioset -b -m signal "${GPIO_CHIP}" "${RPI_UP}"=1 ; then
	echo "RPI_UP = 1"
else
	echo "Warning: Unable to set RPI_UP = 1"
fi

echo "Daemon running (pid $$)"

while true ; do
	# Wait for a SYS_ON state change
	gpiomon --num-events=1 "${GPIO_CHIP}" "${SYS_ON}" || true

	sys_on=$(gpioget "${GPIO_CHIP}" "${SYS_ON}" || echo "x")
	case "${sys_on}" in
		0)
			# Start the shutdown thread
			if [ -z "${SHUTDOWN_PID}" ] ; then
				/usr/bin/gpiod-shutdown 300 &
				SHUTDOWN_PID=${!}
			fi
			;;
		1)
			# Stop the shutdown thread
			if [ -n "${SHUTDOWN_PID}" ] ; then
				kill "${SHUTDOWN_PID}"
				SHUTDOWN_PID=
			fi
			;;
	esac
done
